package server;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.FileInputStream;
import java.io.IOException;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;


public class ServerMT {
	
	private static ServerSocket listener;
	
	public static void main(String[] args) throws IOException {		
		int clientNumber = 0;
		String serverAddress = "127.0.0.1";
		int serverPort = 5000;
		try {
			listener = new ServerSocket();
		} catch (IOException e) {
			e.printStackTrace();
		}
		listener.setReuseAddress(true);
		InetAddress serverIP = InetAddress.getByName(serverAddress);
		listener.bind(new InetSocketAddress(serverIP, serverPort));
		System.out.format("The server is running on %s:%d%n", serverAddress, serverPort);
		try {
			while(true) {
				new ClientHandler(listener.accept(), clientNumber++).start();
			}
		}
		finally {
			listener.close();
		}	
	}
	private static class ClientHandler extends Thread{
		private Socket socket;
		private int clientNumber;
		private String request;
		private String response;
		DataOutputStream out = null;
		DataInputStream in =null;
		public ClientHandler(Socket socket, int clientNumber) {
			this.socket=socket;
			this.clientNumber = clientNumber;
			
			System.out.println("New connection with client#"+ clientNumber+" at " + LocalDateTime.now());
		}
		
		public void run() {
			try {
				out = new DataOutputStream(socket.getOutputStream());
				in = new DataInputStream(socket.getInputStream());
				out.writeUTF("----- Liste de commandes accepte par le serveur : ----");
			    out.writeUTF("cd <Nom d’un répertoire sur le serveur> ");
			    out.writeUTF("ls  ");
			    out.writeUTF("mkdir <Nom du nouveau dossier>");
			    out.writeUTF("upload <Nom du fichier>");
			    out.writeUTF("download <Nom du fichier> ");
			    out.writeUTF("exit ");
			    out.writeUTF("Saisizez votre commande ...");
			    String fullCmd = "";
			    while(!fullCmd.equals("exit")) 
			    {
				    while((fullCmd = in.readUTF()).equals("")) {}
				    //fullCmd = in.readUTF();
			        if(!fullCmd.equals("exit")){        		
			    	   handleUserCmd(fullCmd);
			    	   out.writeUTF("Voulez vous executer une autre commande ...");
			    	   fullCmd="";
			        }
			    	
		         }
			    
        	}catch(IOException e) {
				System.out.println("Error handling client#"+clientNumber+" : "+e);
			}
			finally {
				try {
					socket.close();
				}
				catch(IOException e) {
					System.out.println("Coulnd't close a socket, what's going on?");
				}
				System.out.println("Connection with client# "+clientNumber+" closed");
			}
		}

		private void handleUserCmd(String fullCmd) throws IOException {
			 String subCmd = fullCmd.substring(0,fullCmd.indexOf(" "));
	         DateTimeFormatter myFormatObj = DateTimeFormatter.ofPattern("yyyy-MM-dd@HH:mm:ss");  
	         LocalDateTime myDateObj = LocalDateTime.now();
	         String formattedDate = myDateObj.format(myFormatObj);
	         String ipclient = this.socket.getRemoteSocketAddress().toString().substring(1); 
	         System.out.println("["+ipclient+"-"+formattedDate+"] : "+fullCmd);
			switch (subCmd) {
			case "cd":
				System.out.println("votre commande now : "+fullCmd);
				break;
			case "ls" :
				System.out.println("votre commande now : "+fullCmd);
				break;
				
			case "mkdir":
				System.out.println("votre commande now : "+fullCmd);
				break;
			case "upload":
				System.out.println("votre commande now : "+fullCmd);
				break;
			case "download":
				String filename = fullCmd.substring(fullCmd.indexOf(" ")+1,fullCmd.length());
				FileInputStream fr = new FileInputStream(filename);
				byte []b=new byte[4096];
				fr.read(b, 0, b.length);
				out.write(b,0, b.length);
				break;
			default:
				out.writeUTF("Commande incorrect !!!");
				break;
			}
			
		}
	}
}

